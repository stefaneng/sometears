[{"path":"https://stefaneng.github.io/sometears/articles/sometears.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"sometears","text":"sometears package collection functions estimating directed acyclic graphs (DAGs) data. package includes functions estimating adjacency matrix DAG, thresholding adjacency matrix, simulating data DAG. package also includes functions estimating structure DAG data, including functions estimating adjacency matrix DAG, thresholding adjacency matrix, simulating data simple linear SEM. two main algorithms package implements DAGMA algorithm Bello et al. (2023) TOPO algorithm Deng et al. (2023).","code":""},{"path":"https://stefaneng.github.io/sometears/articles/sometears.html","id":"generate-data","dir":"Articles","previous_headings":"Introduction","what":"Generate Data","title":"sometears","text":"can generate data simple linear SEM using sim_linear_sem function. function generates data simple linear SEM given adjacency matrix WW value Wi,jW_{,j} represents direct effects variable ii variable jj. assume errors normally distributed mean 0 variance Σ=diag(1)\\Sigma = \\text{diag}(1) $$ X = X W + \\epsilon \\quad \\epsilon \\sim N(0, \\Sigma)\\\\ (- W)^{-1} X \\sim N(0, (- W)^{-T} \\Sigma (- W)^{-1}) $$","code":"set.seed(13) B <- matrix(   c(0, 2, 0, 2,     0, 0, -2, 0,     0, 0, 0, 2,     0, 0, 0, 0),   nrow = 4, ncol = 4, byrow = TRUE)  # Plot the DAG B_long <- adj_mat_to_long(B) B_long$name <- B_long$from ggdag(as_tidy_dagitty(B_long)) +   theme_void() # Simulate from the DAG d <- ncol(B) X <- sim_linear_sem(B, n = 500, Sigma = 1 * diag(ncol(B)))"},{"path":"https://stefaneng.github.io/sometears/articles/sometears.html","id":"estimate-dag-with-dagma","dir":"Articles","previous_headings":"Introduction","what":"Estimate DAG with DAGMA","title":"sometears","text":"DAGMA uses path-finding algorithm estimate adjacency matrix DAG. used torch package R implement DAGMA algorithm Bello et al. (2023). Initially used ADAM optimizer found torch::lbfgs worked better algorithm. algorithm quite sensitive parameters sometimes can difficult converge. limitation algorithm working improving convergence properties better align python version. Note: evaluated since torch needs installed via torch::install_torch","code":"dagma_W <- dagma_fit_linear(   X,   trace = T,   mu = c(1, 0.1, 0.01, 0.001),   l1_beta = 0.002) #> Params:  mu: 1, s: 1.1, epoch: 5, l1_beta: 0.002  #> torch_tensor #>  0.0993  0.4785 -0.4886  1.1276 #>  0.1768  0.1299 -0.6467 -0.1957 #> -0.1403 -0.1679  0.2113  1.1188 #>  0.0325 -0.0920  0.2253  0.3827 #> [ CPUFloatType{4,4} ][ requires_grad = TRUE ] #> Params:  mu: 0.1, s: 1.1, epoch: 5, l1_beta: 0.002  #> torch_tensor #>  0.0388  1.4284 -0.5675  1.7394 #>  0.0376  0.0502 -1.4493 -0.2000 #> -0.0355 -0.0480  0.0662  1.7507 #> -0.0146 -0.0313  0.0459  0.0643 #> [ CPUFloatType{4,4} ][ requires_grad = TRUE ] #> Params:  mu: 0.01, s: 1.1, epoch: 5, l1_beta: 0.002  #> torch_tensor #>  0.0059  1.9885 -0.1706  1.9246 #>  0.0033  0.0052 -1.9058  0.0156 #> -0.0020 -0.0030  0.0055  1.9915 #> -0.0008 -0.0017  0.0030  0.0053 #> [ CPUFloatType{4,4} ][ requires_grad = TRUE ] #> Params:  mu: 0.001, s: 1.1, epoch: 5, l1_beta: 0.002  #> torch_tensor #>  6.0011e-04  2.0275e+00 -1.4186e-01  1.9360e+00 #>  3.2878e-04  5.1134e-04 -1.9381e+00  3.0202e-02 #> -1.9423e-04 -2.9181e-04  5.4719e-04  2.0087e+00 #> -7.4461e-05 -1.5909e-04  2.9662e-04  5.1541e-04 #> [ CPUFloatType{4,4} ][ requires_grad = TRUE ]  print(round(dagma_W, 2)) #>      [,1] [,2]  [,3] [,4] #> [1,]    0 2.03 -0.14 1.94 #> [2,]    0 0.00 -1.94 0.03 #> [3,]    0 0.00  0.00 2.01 #> [4,]    0 0.00  0.00 0.00"},{"path":"https://stefaneng.github.io/sometears/articles/sometears.html","id":"dagma-with-lbfgs","dir":"Articles","previous_headings":"Introduction","what":"DAGMA with lbfgs","title":"sometears","text":"also implemented DAGMA algorithm L-BFGS optimizer lbfgs package. adds better way L1 penalty via L-BFGS. found algorithm still quite sensitive parameters sometimes can difficult converge. small L1 penalty needed algorithm converge.","code":"dagma_W <- dagma_fit_linear_optim(   X,   trace = T,   s = 1.1, # logdet penalty   l1_beta = 0.0001, # Should be small or else it will not converge   mu = c(1, 0.1, 0.01)) #> Params: mu = 1 , s = 1.1 , l1_beta = 1e-04  #> Current W: #>             [,1]        [,2]       [,3]       [,4] #> [1,]  0.10182315  0.49522506 -0.4892714  1.2423744 #> [2,]  0.18023098  0.12413810 -0.6312867 -0.3058594 #> [3,] -0.13289579 -0.15952087  0.2138033  1.0838681 #> [4,]  0.03504573 -0.09167694  0.2307984  0.3900861 #> Params: mu = 0.1 , s = 1.1 , l1_beta = 1e-04  #> Current W: #>             [,1]        [,2]        [,3]        [,4] #> [1,]  0.03489896  1.45599576 -0.39236635  1.93486742 #> [2,]  0.03215653  0.04851488 -1.56056032 -0.35166033 #> [3,] -0.02773212 -0.04177851  0.06487234  1.72473115 #> [4,] -0.01137913 -0.02895497  0.04620984  0.06534263 #> Params: mu = 0.01 , s = 1.1 , l1_beta = 1e-04  #> Current W: #>               [,1]         [,2]         [,3]         [,4] #> [1,]  0.0047574670  1.949036510  0.000000000  2.031468144 #> [2,]  0.0027600829  0.005351058 -2.009785687 -0.111376551 #> [3,] -0.0015344454 -0.002975090  0.005777199  1.958427485 #> [4,] -0.0006156993 -0.001727987  0.003247285  0.005713384  print(round(dagma_W, 2)) #>      [,1] [,2]  [,3]  [,4] #> [1,]    0 1.95  0.00  2.03 #> [2,]    0 0.01 -2.01 -0.11 #> [3,]    0 0.00  0.01  1.96 #> [4,]    0 0.00  0.00  0.01"},{"path":"https://stefaneng.github.io/sometears/articles/sometears.html","id":"estimate-dag-with-topo","dir":"Articles","previous_headings":"Introduction","what":"Estimate DAG with TOPO","title":"sometears","text":"TOPO swaps pairs valid topological order decrease loss function. find algorithm works extremely fast linear case able recover true DAG.","code":"est_B <- fit_topo(X, d:1) print(round(est_B$W, 3)) #>      [,1]  [,2]   [,3]   [,4] #> [1,]    0 2.001  0.001  2.120 #> [2,]    0 0.000 -2.037 -0.145 #> [3,]    0 0.000  0.000  1.969 #> [4,]    0 0.000  0.000  0.000"},{"path":"https://stefaneng.github.io/sometears/articles/sometears.html","id":"sachs-data-analysis","dir":"Articles","previous_headings":"Introduction","what":"Sachs data analysis","title":"sometears","text":"","code":"data(sachs) set.seed(1234)  d_sachs <- ncol(sachs) est_sachs <- fit_topo(as.matrix(sachs), 1:d_sachs, s=1.1)$W  col_names <- colnames(sachs) result_df <- data.frame(from = character(), to = character(), strength = numeric(), direction = character(), stringsAsFactors = FALSE) threshold_graph <- 0.5 for (i in 1:nrow(est_sachs)) {   for (j in 1:ncol(est_sachs)) {     if ((est_sachs[i, j] > threshold_graph) || (est_sachs[i, j] < -threshold_graph)) {       new_row <- data.frame(from = col_names[i], to = col_names[j])       result_df <- rbind(result_df, new_row)     }   } }  if (requireNamespace(\"bnlearn\", quietly = TRUE)) {   dag <- bnlearn::empty.graph(nodes = colnames(sachs))   bnlearn::arcs(dag) <- result_df   bnlearn::graphviz.plot(dag) } else {   print(est_sachs) } #>              [,1]        [,2]         [,3]        [,4]        [,5]        [,6] #>  [1,] 0.000000000  0.00000000  0.000000000  0.17194605  0.07877942  0.07385326 #>  [2,] 1.352252378  0.00000000  0.000000000  0.25278685  0.07214880 -0.00900717 #>  [3,] 0.373731358  0.49456100  0.000000000  0.78436901  0.52048313  0.29225973 #>  [4,] 0.000000000  0.00000000  0.000000000  0.00000000  0.00000000  0.00000000 #>  [5,] 0.000000000  0.00000000  0.000000000  0.80603604  0.00000000  0.00000000 #>  [6,] 0.000000000  0.00000000  0.000000000 -0.18228967 -0.08522520  0.00000000 #>  [7,] 0.000000000  0.00000000  0.000000000  0.14364721  0.05793260  0.00000000 #>  [8,] 0.000000000  0.00000000  0.000000000  0.00000000  0.00000000  0.00000000 #>  [9,] 0.006803594 -0.01034267 -0.007080206  0.05773732 -0.02518768  0.07983138 #> [10,] 0.229475400  0.44804562  0.434849430  0.36661795  0.32247086  0.23740054 #> [11,] 0.000000000  0.00000000  0.000000000  0.08633655  0.00000000  0.00000000 #>              [,7]        [,8] [,9]    [,10]      [,11] #>  [1,]  0.04033524   2.0653899    0 0.000000  0.2553003 #>  [2,] -0.02151390  -0.5569615    0 0.000000 -0.2308707 #>  [3,]  0.13137972   3.1332025    0 0.000000  0.4849756 #>  [4,]  0.00000000   0.1651542    0 0.000000  0.0000000 #>  [5,]  0.00000000   0.2235938    0 0.000000  0.1478282 #>  [6,]  1.40166072 -14.8242956    0 0.000000 -0.2967703 #>  [7,]  0.00000000  12.0324482    0 0.000000  0.2146607 #>  [8,]  0.00000000   0.0000000    0 0.000000  0.0000000 #>  [9,]  0.06345477  -0.2720148    0 1.881136 -1.5427374 #> [10,]  0.12184941   4.6164549    0 0.000000  0.9780254 #> [11,]  0.00000000   0.2590884    0 0.000000  0.0000000"},{"path":"https://stefaneng.github.io/sometears/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan E. Eng. Author, maintainer. Jacob Vidergar. Contributor. Ye Tian. Contributor.","code":""},{"path":"https://stefaneng.github.io/sometears/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Eng S (2024). sometears: NOTEARS objective optimization. R package version 0.1.0, https://github.com/stefaneng/sometears, https://stefaneng.github.io/sometears/.","code":"@Manual{,   title = {sometears: NOTEARS objective optimization},   author = {Stefan E. Eng},   year = {2024},   note = {R package version 0.1.0, https://github.com/stefaneng/sometears},   url = {https://stefaneng.github.io/sometears/}, }"},{"path":[]},{"path":"https://stefaneng.github.io/sometears/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Continuous structure learning in R","text":"```{r} devtools::install_github(“stefaneng/sometears”)","code":""},{"path":"https://stefaneng.github.io/sometears/index.html","id":"to-run-the-sachs-data-we-need-to-install-the-following-packages-from-bioconductor","dir":"","previous_headings":"","what":"To run the Sachs data we need to install the following packages from bioconductor","title":"Continuous structure learning in R","text":"(!require(“BiocManager”, quietly = TRUE)) install.packages(“BiocManager”) BiocManager::install(“Rgraphviz”) ```","code":""},{"path":"https://stefaneng.github.io/sometears/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Continuous structure learning in R","text":"Network structure learning involves finding optimal solutions constraints traits interest directed acyclic graph (DAG) structure. Optimizing objective function combinatorial constraint DAG difficult problem due number DAGs increasing super-exponentially (Rodionov, 1992) difficult explore entire graph space. issue finding directed acyclic graph related finding topological sort graph, .e., temporal ordering nodes graph < j, edge node j node . ordering generally unique exists graph acyclic. Recent work involved transforming combinatorial acyclicity constraint continuous optimization problem (Bello et al., 2023; Wei et al., 2020; Zheng et al., 2018). objective function DAG constraint non-convex issues local optimum. latest work sequence papers aims escape local optima swapping nodes valid topological orderings explore regions DAG space topological swaps (Deng et al., 2023).","code":""},{"path":"https://stefaneng.github.io/sometears/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Continuous structure learning in R","text":"Bello, K., Aragam, B., & Ravikumar, P. (2023). DAGMA: Learning DAGs via M-matrices Log-Determinant Acyclicity Characterization (arXiv:2209.08037). arXiv. https://doi.org/10.48550/arXiv.2209.08037 Deng, C., Bello, K., Aragam, B., & Ravikumar, P. (2023). Optimizing NOTEARS Objectives via Topological Swaps (arXiv:2305.17277). arXiv. https://doi.org/10.48550/arXiv.2305.17277 Rodionov, V. . (1992). number labeled acyclic digraphs. Discrete Mathematics, 105(1), 319–321. https://doi.org/10.1016/0012-365X(92)90155-9 Sachs, K., Perez, O., Pe’er, D., Lauffenburger, D. ., & Nolan, G. P. (2005). Causal Protein-Signaling Networks Derived Multiparameter Single-Cell Data. Science, 308(5721), 523–529. https://doi.org/10.1126/science.1105809 Wei, D., Gao, T., & Yu, Y. (2020). DAGs Fears: Closer Look Continuous Optimization Learning Bayesian Networks. Advances Neural Information Processing Systems, 33, 3895–3906. https://papers.nips.cc/paper/2020/hash/28a7602724ba16600d5ccc644c19bf18-Abstract.html Zheng, X., Aragam, B., Ravikumar, P., & Xing, E. P. (2018). DAGs TEARS: Continuous Optimization Structure Learning (arXiv:1803.01422). arXiv. https://doi.org/10.48550/arXiv.1803.01422","code":""},{"path":"https://stefaneng.github.io/sometears/reference/adj_mat_to_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts an adjacency matrix to a long format dataframe — adj_mat_to_long","title":"Converts an adjacency matrix to a long format dataframe — adj_mat_to_long","text":"Converts adjacency matrix long format dataframe","code":""},{"path":"https://stefaneng.github.io/sometears/reference/adj_mat_to_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts an adjacency matrix to a long format dataframe — adj_mat_to_long","text":"","code":"adj_mat_to_long(W, include_zeros = FALSE)"},{"path":"https://stefaneng.github.io/sometears/reference/adj_mat_to_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts an adjacency matrix to a long format dataframe — adj_mat_to_long","text":"W adjacency matrix","code":""},{"path":"https://stefaneng.github.io/sometears/reference/adj_mat_to_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts an adjacency matrix to a long format dataframe — adj_mat_to_long","text":"dataframe columns ``, ``, `value`","code":""},{"path":"https://stefaneng.github.io/sometears/reference/dagma_fit_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"DAGMA algorithm to learn DAGs — dagma_fit_linear","title":"DAGMA algorithm to learn DAGs — dagma_fit_linear","text":"Implements DAGMA algorithm learn DAGs Bello et al. (2023).","code":""},{"path":"https://stefaneng.github.io/sometears/reference/dagma_fit_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DAGMA algorithm to learn DAGs — dagma_fit_linear","text":"","code":"dagma_fit_linear(   X,   loss = torch_l2_cov,   h_func = torch_h_logdet,   s = 1.1,   mu = c(10, 1, 0.1, 0.01, 0),   epoch = 5,   l1_beta = 0.05,   lr = 1,   trace = FALSE )  dagma_fit_linear_optim(   X,   loss = torch_l2_cov,   h_func = torch_h_logdet,   s = 1.1,   mu = c(1, 0.1, 0.01),   l1_beta = 1e-04,   trace = FALSE )"},{"path":"https://stefaneng.github.io/sometears/reference/dagma_fit_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DAGMA algorithm to learn DAGs — dagma_fit_linear","text":"X matrix data columns variable interest directed acyclic graph loss loss function use. Default L2 loss. h_func continuous acyclic function use. Default h_logdet. s regularization parameter. larger spectral radius X. mu vector weights put loss function. epoch ADAM optimizer epochs. l1_beta L1 regularization parameter. lr Learning rate ADAM optimizer. trace Boolean enable progress printing tol Tolerance convergence. betas Beta parameters ADAM optimizer. eps Epsilon parameter ADAM optimizer.","code":""},{"path":"https://stefaneng.github.io/sometears/reference/dagma_fit_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DAGMA algorithm to learn DAGs — dagma_fit_linear","text":"matrix estimated W matrix","code":""},{"path":"https://stefaneng.github.io/sometears/reference/dagma_fit_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DAGMA algorithm to learn DAGs — dagma_fit_linear","text":"","code":"B <- matrix( c(0, 3, 0, 3,  0, 0, 3, 0,  0, 0, 0, 3,  0, 0, 0, 0), nrow = 4, ncol = 4, byrow = TRUE) # Simulate from the DAG d <- ncol(B) X <- sim_linear_sem(B, n = 500, Sigma = 1 * diag(ncol(B)))  print(threshold_W(dagma_fit_linear(X, mu = c(10, 1, 0.1, 0.01, 0.001), l1_beta = 0.05), 0.1)) #> Error in (function (self) {    .Call(`_torch_cpp_torch_namespace_t_self_Tensor`, self)})(self = structure(c(1.1012475184684, -0.0878309418217512, 2.03177481313703, -0.0650470583997623, -0.936366356788534, -0.816803466427713, 1.79209650229866, 0.72015537469719, 0.104201316470714, 0.452604749316978, 0.277344027395851, 0.0267873043412744, -1.91630921349066, 1.24209525182306, -0.441183869001891, 1.60911582782834, 0.767887203696545, -0.178775200513226, -0.59278195132994, 1.14081632990368, -0.373546744270823, -0.498884009172984, 1.48318662618943, -0.420569347222724, -1.99579557464457, -0.155841474386343, 0.709416421950173, -0.53187906259306, 0.891951779889556, 1.13293691280096, -1.18043266904137, 0.00492915226771734, -0.307330643965734, -1.40118757287695, 0.0725707354238331, 0.450951967441045, 1.64707410409937, 0.176919168894099, 0.6805194934356, -0.669284576089836, 0.578843843924619, 0.601810154167794, 0.486478761371334, 0.165890506035077, -0.349052689809859, -2.76173055388742, -0.294688449931941, -0.325307242836996, 0.000962666699922009, 1.54120825264657, -1.03698495590415, -0.237184361048004, 0.745019602237656, -0.109122481788347, 0.210925291624133, -0.608157788666744, 1.93442577059102, -2.61483504637694, 0.657174912326209, -0.578613804708945, -0.917706482227198, 0.843096585867583, -1.83959778861609, 0.368463283699439, 0.855325544005412, 0.997900117241077, -1.01615922150367, -0.387190579833094, -0.337796712358127, 1.79715507953466, 1.022433299465, -0.708153580946866, -1.24038096110339, -0.376979667309859, -1.04757664341825, -0.397782696370413, -0.200637109957165, 0.0316460550843628, -0.0848733893474939, 0.387416985332416, -1.67672780394571, -1.26224885998959, -1.36194068631546, -0.264158182304873, 0.500733740820094, -0.347902346321264, 3.06377174100594, 0.294156864997906, -0.326879463635837, 0.119076133497958, 0.0634515533055987, -1.39958662792602, -0.91937110510525, -0.0465274951202309, -0.717848907041939, -1.65258131451188, -0.00342436780726839, -0.570561363691099, -1.25722495867847, -0.323360719134632, 0.477399361367895, 1.21410619201878, 1.25458700931074, 1.47313971441944, 1.61245739194909, 0.441183386910727, 0.460039919954576, 0.60132174003741, -0.1389589318019, -0.931461319771145, -0.210850530057789, 0.836156755492166, -0.614442187143584, 0.380975795303921, -0.540811737269259, -1.98769019712486, 0.00860873309844909, 1.26006756989205, -0.0853563264323932, -1.35610689951596, -1.39807096715348, -1.02359330431221, -0.901337756853799, -0.162617548880113, -0.136674428321494, -0.240134198382592, -0.655009094254894, 0.451737398699773, 0.329373198292806, 0.265334406142495, 0.929395303942872, -0.73424974852257, -0.285750839072441, 1.22956733693453, 1.2937852781578, -0.920803466663395, 0.560175682305367, -0.0443421922689949, -1.36556502003439, 0.321255217888116, 0.461753355653808, 0.30083189464611, -1.73897750952385, -0.795219198340177, -0.829458929076855, -1.32816545541207, 0.969087728547304, -0.485065985738588, 1.29907332107769, -1.5115097621648, -0.424435252977943, -0.219160822968114, 1.16296948814501, 0.590078757236577, -0.967115228632111, -0.164687254380385, -0.210593526573482, 0.138942161948222, -0.798245202008587, -0.46453451520838, 1.44535539660816, -0.783744478446215, 0.36128657571645, 0.0841241925946158, 1.80298948124094, 0.397602469219722, 1.24258148810459, -0.373723349232169, 0.740857594851343, -0.299333638926804, -0.408687231847969, 0.948067942874296, -1.40662173408162, -0.742694618824872, -0.727765257503776, -0.664959188461727, 0.400333892025102, 1.45974952806561, 0.233104533196284, -2.47706091760096, 0.690206939838786, 0.707771811787112, 1.37230095531712, -1.25363074804869, -0.130175508283566, -1.34802458385923, 1.0249731894902, -3.04410068773559, -0.957852069336868, -0.965091185619487, -1.36420004577361, -0.127965295658997, 1.23324818544944, 0.780081189938228, -2.14338924157749, -0.0304040460551875, -0.602725753331694, -1.20634593988957, -1.10252095895545, -0.659657721387293, 0.788181917148335, -1.42118975453803, 0.311139862115379, 0.255424670855902, 2.33734941136401, -0.379082716635412, 0.907775686663237, 0.513325378529882, 2.37696691504335, -1.94964265047458, 1.60462947457085, 0.274114951060752, -1.1806232512327, 1.10912182372665, -0.307961985933352, 0.183345410947106, -1.02436111863717, -0.472074370351165, 1.22025794876825, -1.3889677696331, 0.260102803169003, -0.408367087337651, -0.10777638087048, 0.328470235899091, 1.13587509626265, -1.31821974179658, -0.159429889373521, 0.356121709651087, -1.06169824784106, 1.67874697237644, -0.148308105683379, 0.976385560207473, -1.07451991707119, 1.73596407791524, 0.404297033007596, 1.02310777270045, 1.07870352625388, -0.856597900337491, -1.26246948476951, 1.17322585715003, 1.28430110507762, -1.2720387102901, -1.0152583922953, -0.668782012148003, 0.992162663114404, -1.71684973539932, 0.0850963027689903, -0.291676623292394, -0.106532394409015, -0.0203718811643529, 0.606286374156191, 0.760671479071841, 1.65038403194805, 0.895650787078162, -1.27022259836451, 0.935537462577362, -0.211801749050056, 0.19732927545635, 0.690567284945829, -1.58484852788644, -0.083462787696558, 1.9126635274605, 0.153144203058808, -0.023673768903946, 0.998484040831132, 2.42832321576235, -1.74059841551961, 1.14727193315375, 0.330786359238959, -0.198920348128106, -0.348124099548661, 1.47279821511953, 0.128673640654852, -0.132880273693937, -0.0317979295204525, -1.69429155894093, -2.44905039933204, -0.527067761750057, -0.591680953106301, 0.485744677245947, -0.97685816753091, 0.630533754053461, -0.313797160478625, -0.733483402141339, -0.11035348454293, -0.651848180021997, 1.29028887797428, -0.967693464249786, -1.49924229559048, 1.00986929194887, 0.73139180239845, 0.63942887804872, 0.69500241915355, -0.346648750121786, -1.45650426421052, 1.35431355453647, 1.79971542230463, -0.801374588228249, -0.167487302224278, -2.0630072885257, 0.979532934673992, 1.02104859042623, -1.01353551345611, -0.889272725564903, 0.0347758570575007, 0.0777368195782551, -0.568627703048666, -2.24341846508037, -1.81131004279593, 1.47340082095931, 0.41952927513146, 1.3410608778666, -0.335260116262362, 1.51619995285356, -0.0150792750987927, -0.195486357069151, -1.42588154597352, -0.222111715323362, 1.02146084695486, -0.163578378022037, -0.220910181895538, -0.0576225851419488, -0.96102811875614, 0.0913887384594994, -2.19566125793721, 1.41322675457061, -0.0717003155818788, -1.47606281718872, -0.66543649403747, -0.526054875469313, -1.00428206433713, 2.09231183244457, -1.13032635688008, -0.359174046118812, -0.291649315667778, -0.80793426472974, 0.66227786027308, 1.08419972197782, 0.217840319510142, -0.721362655803563, 0.180216447270246, -2.16788534116985, -0.383891563647177, 0.760759431882247, 1.15361942237252, -1.38369714315179, -0.130723065315821, 0.800259609839841, 0.462316829109611, -1.15344648010271, 0.649451295816459, 0.395503614796647, -0.776183828542893, -1.80649276260493, -1.84824526900927, -1.6590445051424, -0.265299615934177, -1.38541931070385, 0.210300776843176, 1.00854169470897, 0.289628783960717, -1.40113147820183, -0.960170631276582, -2.07219733281124, -0.309415729819268, -1.04215633689313, 1.78038389954839, 0.493541404557303, -1.29262253857041, 0.562826567444756, -0.142504732693308, 0.789535707773492, 0.459627811161715, 1.09314370542834, -0.0982207768050155, -1.09335366413196, -0.190788580192171, 0.251143810979957, -0.101133185459704, -1.05410417128498, -0.220835560514808, 0.567609403578727, 0.0536486272620187, 0.38308457002813, -0.574551671396508, 0.0289225829044685, -0.0543487583160644, -0.667886478677107, 0.708363876708002, -0.572029592946065, 0.307782541246022, -0.701396814721868, -1.85947491788183, 0.994264556954953, 0.0907957237256274, -2.63980196038922, 1.13241040969506, -1.35753129842555, -0.077871282640353, -0.106300200145609, -1.32060586468641, 1.02581909962069, 1.20898055251547, -0.792559642701818, 1.37244562682751, 1.27439834630801, -0.403380995695463, -1.54663655212097, 0.761417997730047, 1.47655725244425, -0.182475910976569, 0.546977199442823, 0.772147411161832, 0.319731370902023, -1.1285768711408, -0.668867077823505, -0.683869571045657, 1.51350094806437, -0.624189655232923, -0.140683219451264, -1.00064543117767, 0.511472292477249, -0.424126555608954, 1.38797802335342, 2.79438600719716, -0.548584129185809, 0.444610837431545, 1.48276327809963, -0.838871643462867, -1.33080955565355, -0.498054363446584, 0.680668324996113, -0.676293735073519, -1.26867151874033, 1.3442433049343, 0.735484364587308, 0.561874678410328, 0.282480159940097, 0.150822589965079, 1.87913238382449, 0.816851647480004, -0.631659131629491, 0.98948784532325, 0.254767793774952, -0.63143243259527, 0.399965256028403, 1.72505711564887, 0.88318273313398, -1.13384261391983, -0.314277760127561, -1.43289821714056, -0.145059250885783, 1.35575348666889, 2.12435088768117, -0.115333768473669, 2.22060149168128, 0.573709486814745, 0.429717414623534, -1.1936088917384, 0.421873420789116, -1.09667713015175, 0.0564290485840529, -1.19975223910935, 0.71639988371695, 0.639093791158853, -0.114841992829083, 0.313495186417941, 0.543228078905361, -0.724534803980678, -0.609610338303988, 0.0651795568388185, 0.921440744691071, 0.47581931684296, 2.06188841406834, 1.14801319409375, -0.183948251908811, 0.194765411601507, -0.147292012051748, 0.0271452796011037, 1.46713756891192, 0.244208711551269, -0.458845662038698, -0.681723266069727, -1.05555941445797, -0.896463293883997, 0.109534420780834, -0.491433943219024, -0.801278322146195, -1.96326026620804, 2.36296272811246, 0.221097465829343, 0.575417405938647, 0.206621070261468, 1.37006196962439, 0.39013114489168, 0.381746611889864, 1.09896088471037, -0.238030357574647, 0.590115387754989, -1.81940546510898, 4.5894877248766, -0.776047976769021, 7.54066806393257, 0.479364001143304, -1.40469451612976, -3.56677962054504, 5.67746152441421, 0.872593320712818, 0.293219499499292, 0.937598564345621, 2.28966981999023, -2.47088385276068, -6.74091901912746, 4.80231737559045, -2.19051102425811, 5.97266851719036, 2.03317312747781, -0.194320394170069, -1.04131042585236, 2.91981782079672, -0.763878327748552, -1.21107625416884, 4.57062273466584, -2.3386431207336, -6.19431849557548, 0.0117154511431428, 2.50022382814572, 0.783036508427792, 3.51649645466779, 4.75946840547995, -3.20591591092069, -0.381348427180878, -0.611164017916903, -5.06741041721825, -0.48236675281484, 0.831724326341339, 5.81142662143757, 1.72096884715493, 0.892690665676883, -3.30106975236601, -0.319498901062299, 1.81515230476684, 0.0948389157339583, 0.732717214227031, -1.45959155135657, -8.7192972245519, -0.610894468684465, -2.08000785867578, -0.3856902336128, 6.14904552552712, -2.73753297237684, 0.725736134511566, 0.680860691355028, -0.35607222629843, 0.0769796042613198, -1.26625304422189, 6.97146145153294, -8.27534335533564, 1.12898275817422, -0.43073679344503, -3.82715329633193, 2.18127571972342, -3.65871228520574, 0.667417192201248, 4.2532805628995, 3.49405212028692, -2.6162476996631, -0.301884379567965, -1.81383119385424, 5.4541759950793, 4.13565210199566, -1.456339735431, -4.36317463554023, -0.504260360754926, -3.92342254472656, -1.81517392740232, -1.51676909301338, 0.503582201090196, -0.52068782283381, 0.878870528875874, -5.75833916145291, -4.2203110330325, -2.1372296164267, -1.8024600951986, 1.74204264994211, -3.461282482451, 8.4255414145407, 0.713253618893342, -0.781236529645385, 1.42225656719613, -0.778935494742783, -4.1704268007526, -3.84197774902514, 0.133261748180265, -1.70612490321118, -4.80788957987775, 1.27394076018172, -2.86715627173158, -4.57050196857188, 1.03060983796772, 1.77021942176985, 2.62286006413691, 3.29842268250799, 2.39697185901272, 5.60159736751173, 2.66163552948824, 2.43126767699829, 1.6931237932955, -0.748993238693007, -3.2360071996296, 0.307143377818729, 4.69494244506587, -0.935339216651035, 1.54384511761366, -1.61084307110366, -6.46655957514464, -1.15760393523214, 5.38498519961474, -0.8942032121038, -3.06443295969024, -6.328539829931, -2.16493489197546, -4.0467007849725, -1.19384222466004, -0.00811694948604324, 0.260019730918777, -2.00181236198559, 0.643154334877159, 2.05180055626942, -0.813801156684657, 3.68183736449097, -2.1952673764899, -0.574282903763929, 3.73914109543128, 3.00390807979711, -1.01431360044827, 3.39088432807338, 1.38421410979548, -3.02346853715038, 0.178955241011906, 0.951109183462837, 2.48293266569261, -6.28349759471926, -2.3280009085878, -3.64840325449708, -4.06336298400962, 3.23212796432515, -1.76108530879714, 5.22764257229836, -4.53697377862204, -0.564169089074504, -0.30955021483128, 3.05868001544475, 2.23241922131499, -3.82471144208126, -2.02211045450812, 0.0359416048099032, 1.06580663976332, -2.23797000960116, -2.52009152636695, 6.13286736383888, -3.25549309451706, 1.04545294555968, -1.66967687173723, 5.22797101362396, 2.33124746379213, 3.92869239477556, -1.24800808463617, 0.940620650653027, -2.12742520949011, 0.467176716714103, 3.19340972047987, -3.69887214196421, -2.56257561897009, -2.91475750617015, -3.23673138868756, 1.51980931643056, 3.50949081527792, 1.44075053506615, -6.6477611923174, 3.61005611726179, 4.35983642204629, 5.4218834894818, -4.74498944939048, -1.77795943691326, -6.59334478405407, 0.376722755156045, -7.9040679547223, -3.10184466093989, -2.88921395773869, -3.36602626825314, 1.10177391025624, 2.78747038196909, 1.92747270409272, -5.09059839322932, 0.065269479159649, -1.05338322871877, -4.08763421439679, -4.27646794126796, -1.50868954335396, 1.54790183973268, -5.30791270659524, 0.516055654660149, 1.0973722146465, 7.76167116492271, -0.365217468788022, 3.51435812458886, 1.56822215305328, 6.33686801673189, -8.28935991973651, 3.24988569671708, 1.08001501374288, -2.58159028053077, 3.33757810291198, -1.7487844734408, -0.395891729256817, -1.60013500671771, -0.998424189614359, 4.13618743418199, -2.56296406680887, 0.62855587360351, 0.661508106075142, -0.721281769903009, -0.761846986374225, 3.05378409880893, -3.94737364252038, -1.14512856470604, 1.43535852628433, -2.79373145441932, 5.06828336099057, -0.578688772993314, 4.12447767845748, -2.17181002609421, 4.6925705227986, -0.390671159714044, 2.41344145957576, 2.4198244421938, -2.35926110040926, -3.13291197855341, 5.80598963781089, 3.10054026703559, -4.14703653302156, -3.46301399371912, -3.83529815474781, 4.62252333874893, -4.51180272488615, 0.220882775242566, 0.171786779240453, -0.943910757115115, -0.0980852891045203, 1.98664977223292, 2.13409032840803, 3.91110599019569, 2.97956912069579, -4.33982956734106, 3.20331912699078, -0.673368715541626, 1.79138157393798, 2.12235188371471, -4.77173297631602, -0.468288856621285, 4.98204047157787, 0.426284191527821, 1.34724350760141, 2.98431997638775, 7.07893025262043, -5.98819784895282, 3.01953765289294, 0.46238943383262, -0.818854078867584, 0.123542284248783, 7.14620147370962, 0.151992451998464, -0.698123937832003, 0.371812909099339, -6.2492908665081, -7.08758040569384, -2.04205867873606, -2.07894254898669, 0.786062922950523, -2.83334655723361, 2.77446521509896, -1.98910486140436, -0.921395815160962, -1.13859908731661, -3.34717762074362, 2.70694479605766, -0.803210126873798, -4.62287613164094, 1.17772815692031, 0.899993489659876, 0.356177450970882, 2.83427768747308, -1.59975273820755, -5.55063842729075, 4.656017868885, 4.20536412018127, -2.26730566195217, -1.81816967516849, -6.78965389944642, 1.3208797409772, 3.43913420160886, -3.54860976133585, -3.78216270622273, -0.505940864279441, 1.05086891442568, -2.19772646707731, -6.04295556612802, -5.66538240560838, 5.43883002726458, 2.08246017342942, 3.61969376172182, -1.7239886771754, 5.62155439831624, -1.66068684971556, 0.25257407196196, -3.10733057698693, 0.668256765705589, 2.97022613530288, -0.994506289013376, -2.14237449756335, -1.49024041889723, -4.65073536722612, -0.131658251244048, -6.47553356536234, 5.22088228024339, -1.05448411579114, -4.22196592128662, -1.15861188345985, -2.10481622832062, -3.69651566564649, 6.34481572088907, -3.97159289791996, 0.203671386905847, -0.897274582638113, -3.96842740664248, 3.51774773788897, 3.82856153749375, -0.527736716569946, -2.44287168328498, 0.545978166729656, -6.88922802959919, 0.82062694217346, 4.31206199596905, 3.71875150100405, -5.04204335862838, 0.234440896362563, 1.324139321671, 0.840078876524675, -3.00853637287764, 2.07158294520631, 0.247982864973353, -1.41536076417983, -5.16015359066039, -4.56209257627102, -4.30940526912655, 0.94531218260426, -6.32306469037591, 1.91568706072262, 2.81313473163332, 0.71607208599327, -3.45560801279013, -2.5117397648279, -6.37791078312308, -0.43269985665732, -3.4738798691955, 5.77326534804251, 2.57018382221377, -3.70812602949243, 0.588613146588013, -1.11396701083874, 1.95409292822504, 2.99886502964062, 3.27376455055205, 0.86328075570708, -3.67819539391549, -1.06928455184555, 1.06303368539566, 0.17298317513645, -4.24157029215818, -1.25981067351654, 1.35880274888202, -0.0853671827057261, -0.0578020297187955, -1.06284906654356, 0.032270083527101, -0.0347896405166297, -2.90902289905711, 2.60814323550416, -0.971478006942643, 1.17736103040585, -3.06481645441873, -5.17388483542063, 1.8987693300008, 0.284745547612133, -6.51630128689601, 4.83231631075222, -3.93601693561268, 0.758751620702935, 0.678644082838961, -5.17141200731909, 2.68774323806631, 3.24251121200058, -3.30073985696978, 4.97855868289144, 3.50472053345852, -1.97594180873583, -6.75676897986133, 1.75384820757941, 5.17581581886608, -0.302439304458924, 1.96048898277039, 1.95428565066149, 1.831250714609, -4.66740156713357, -1.91756146124329, -1.65242817751269, 5.92663524930125, -2.08020013293818, -0.534689624632935, -1.66650427955855, 0.101562658820923, -2.48968890273148, 3.17432477289733, 8.72682964874046, -2.10401050501126, 1.68754846285565, 6.39843146858495, -0.427501679955765, -2.97222518956674, -1.19757602826107, 2.54115450863097, -1.89727321094509, -4.08156357683324, 1.88699162565872, 1.64144046815475, 3.39274323434289, 1.35984745961748, 0.00718749183332442, 5.39340830052945, 4.17644650919246, -2.55715045991813, 4.23107576366106, 1.32859186097146, -1.55892343738565, 0.92364108304484, 4.35216332807074, 2.86725998572769, -4.93512221963703, -1.26176132326478, -5.4926407207964, -1.75649924956127, 3.19101337165447, 4.57919375129584, -0.0194162923369194, 6.60313970014293, -0.156439411187617, 1.68123104080684, -3.25613909718842, 0.352606486602189, -3.34472968250281, 0.541265594617692, -5.61699764639895, 2.29868018488365, 3.20593828584497, 0.792590481195574, 2.12771805072084, 0.314200465952618, -3.56864817883018, -1.80847382491647, 1.57693305022535, 2.20600332669211, 2.69461267669901, 6.96323822141353, 4.06789767700761, 1.34047899442366, 1.95458565118483, 0.348831817822056, -2.0772758623567, 4.22759015513597, 0.933212459275734, -2.00297465720621, -2.08931517443156, -2.72652185600009, -4.81704810460024, 1.98592414896636, -1.7388898496088, -2.76657571945444, -5.53467138045753, 6.6472165295437, 0.227540771234169, 0.833673734037793, 1.45879987050618, 4.43220995983732, 2.63259827354522, 0.803725440767681, 3.42718465404621, -1.37361132785523, 1.12001236433627, -4.34983353730998, 13.5517317048145, -2.70310391481473, 22.932215820701, -0.189059952731752, -5.59407955185937, -10.7729298259547, 17.040875525498, 2.24227846540925, 1.82033641250474, 2.178915372196, 5.68198588368617, -6.95014010074389, -19.5185567317719, 15.6588022567571, -4.6312935852066, 18.1165405015866, 4.56832648197481, 0.39986494777812, -4.68342555814023, 8.31148861518352, -4.1752676108306, -3.43245638951297, 12.1946785418903, -7.15866000318698, -18.3564433249046, 1.19793468493873, 8.87489378114317, 1.18524189538461, 8.24040090581739, 14.6546001417899, -8.67391717559615, -1.95256388814072, -2.12703357332248, -15.5430632345804, -1.18694320331079, 0.993151189070549, 17.817749416833, 2.76648156695546, 3.11088192457852, -10.5861090777642, -1.24200814312283, 6.1728478402047, 0.0124753257538323, 2.70195255764365, -4.06773919999857, -25.9661996249214, -0.25530062559983, -5.64585146848759, -1.39167187478514, 18.4028514176598, -7.91777193186787, 2.56384237519923, 1.31737821514205, -0.361353182526014, -0.316421550440514, -4.95405774558128, 21.5217516684588, -25.4583392553742, 2.74796172907897, -1.95696137137785, -10.4003356470491, 6.52321805535122, -10.1229420310834, 1.67792007414256, 12.3711421365649, 9.80592285539311, -9.92535013266376, -1.05554965828881, -4.81380104183955, 16.4488340886849, 14.3486185448179, -2.12167550987902, -12.2572912814584, -2.05428191116371, -12.9268784933663, -5.0622436453587, -6.61159034362296, 1.45120504880765, -1.57457934132917, 1.16565560659567, -18.0298209698752, -12.3113526891954, -6.22402828269774, -5.22549214837727, 5.022003010531, -10.9458681840866, 24.7811280229013, 0.897917713734524, -4.13247280898231, 3.72815502692295, -4.69905804887642, -10.0116252315721, -9.80863093521628, 0.613794600842588, -4.34728502637346, -16.014724186191, 3.44649122168068, -8.95082379389362, -12.8652589434022, 3.4804437484334, 3.51354477536717, 7.38932841414627, 9.99810244814681, 6.96267013264794, 16.9596567732616, 6.94879999266011, 5.65035092744214, 4.91138182857739, -1.68716431278306, -9.41849454344108, 2.4789577134136, 14.3019502441999, -1.85623331924708, 4.38724491596836, -4.95138637616073, -20.2308371471566, -4.56118387788915, 16.2958126361742, -2.62267084506268, -9.72337563610563, -19.7653527439096, -3.72357680106395, -13.6770435573088, -4.3280826233612, -0.65093910191008, 0.176126492047113, -5.75872663018174, 2.22495364431734, 5.12072382055837, -2.03477784480914, 10.9079344967108, -7.52787738742732, -0.328144992324675, 12.3525789770167, 8.75957815762342, -4.0851800787231, 8.46746020640762, 3.21947250238542, -8.52127678755151, -0.947916822238666, 1.21473652316702, 7.71705735978789, -18.1068825005113, -6.94759900721506, -9.63865566256289, -12.665210046074, 10.554999445569, -4.48191506133845, 14.8583703175094, -14.915552928947, -3.85975060749845, -1.15227179915327, 10.8119598702602, 5.40895340002665, -9.96152439084749, -6.58762268107007, -0.173535665263951, 3.88392413172895, -7.82471289473889, -7.88771166852576, 18.5202471705626, -9.33898019742441, 2.72056251518478, -2.56192872274667, 17.2767098502383, 7.83618802539323, 11.0142997730565, -3.54288091690041, 2.76782355147753, -6.04599983016808, 1.82309260248107, 9.04410967429209, -12.0956676478853, -8.80678539393826, -7.1950779572264, -9.91434806676699, 4.81961828641931, 11.7863798805711, 2.90633833033719, -20.4812750993439, 10.4886146337521, 11.6463216233854, 16.209937700968, -14.3676636865626, -5.581908750707, -19.7698809455389, 0.759209009428587, -24.2797394798291, -10.1664965439075, -10.5522199582317, -10.4973071413692, 3.9087686546982, 7.70232748768585, 5.75161171637775, -16.3669592174344, -0.999032363361865, -2.67504349687015, -11.0358443484477, -12.0021387821552, -5.9798275648475, 3.79448878882623, -12.6262663416818, 0.432362159104761, 2.54460944399442, 23.5894831524448, -0.433576109813828, 10.7178682236317, 6.01321066236968, 19.3108563850184, -25.1627745301744, 10.1495499188059, 3.14290848160372, -6.65414443166854, 12.4119991946485, -4.83467383018302, -1.18794183374992, -4.81750375446096, -3.90140196238579, 13.8475457740075, -8.06045252010678, 2.80815221246495, 1.14697698997337, -0.539405564592413, -1.58132221944255, 9.65267760150045, -11.7669478058579, -3.27514817385165, 4.29880921494342, -6.76569729224804, 14.3495884556116, -2.15258975232182, 12.7892682721044, -6.49016579797694, 14.8111463601434, -1.30701593863021, 5.93652327136283, 7.72027689612514, -6.57671014200401, -10.6138750937715, 16.3313769384976, 9.08156589451028, -12.203729823667, -10.3585387258715, -12.0870422778072, 13.9545198723275, -13.2966761729901, -0.00134688076723045, 1.05498966911466, -4.33934288280258, -1.29370630592446, 7.90053613597027, 5.34185502910371, 11.1611066988028, 7.56944543921608, -14.2155033215691, 7.77660955216789, -2.84261791144401, 5.18673258759733, 5.67780038306637, -13.6089067550486, -1.5863526778403, 13.1336228164142, -0.0991506592946711, 2.5891262615616, 8.71747221167548, 19.9128977011033, -18.2973993406641, 8.89946779450142, 0.718469077657976, -2.16963866225578, 0.140644400680757, 20.8994062990357, 0.733820798380719, -1.33924057866493, -0.105754810802269, -18.2713276995609, -20.2287600522038, -6.85373959300117, -7.00664544305196, 2.58945474573516, -9.43782418370993, 8.88356925178222, -4.9603465749897, -3.01111370021992, -3.59534853139251, -10.8230350154609, 8.9651076839106, -1.26825384655419, -13.7096047944904, 3.28699679347821, 1.17859582450324, 1.86559857756379, 9.19929962065889, -5.07978446580222, -15.8724574627356, 14.2173608838991, 12.649458461879, -8.51299094993867, -6.4669475933249, -19.8696835942725, 2.90402052502693, 10.3539799245938, -9.94753483013033, -11.5663699818289, -1.96418746652494, 4.12667177655899, -5.69159695676471, -18.2352604482572, -18.1519536594801, 15.0108756307625, 4.82034623958584, 10.4300648435969, -5.98663614325059, 17.7432680020668, -3.99613085837115, -0.591625090288891, -10.6107788519969, 2.72527491039212, 10.2725785837001, -1.28177523188206, -7.38952643077082, -3.78178400573514, -14.550540556277, -0.417483908524223, -19.9460410756271, 14.2263057034373, -4.40066826606718, -13.6777269476316, -2.49509447532425, -6.190894770386, -10.4062239955804, 18.5661417154921, -11.7685516721266, 2.04678713971705, -2.71334038039062, -12.068316772293, 10.8598224912212, 11.0558981079749, -2.1137949698515, -8.03769032907019, 2.4836844061356, -20.2061249062159, 1.7016818857355, 14.0218791085233, 10.6209532790027, -16.5899857194979, 1.08100449916062, 3.91434141680601, 0.735463528447391, -6.89956168597435, 5.33394716552869, 1.29506385292814, -5.06093150063611, -16.5435349922284, -13.9229076357344, -14.0869098564452, 3.94814769249869, -18.1889483695497, 5.52264632531783, 8.09498431367597, 3.35553620291858, -9.96925106352574, -7.07034688765099, -17.040335172038, 1.85707590099748, -9.3261954775608, 16.7638803034521, 8.25625909894165, -10.6197393406683, 1.2165979669439, -1.95876512679032, 6.4907342860504, 9.46215955976368, 9.63953017597949, 3.40675783348776, -10.8742408616492, -3.87830216149549, 4.84930602531184, 1.47603376407981, -11.2255861211227, -3.70613202871875, 3.28974131713901, 0.864299978873941, -0.66001684905885, -3.14196587187735, -0.39110477621089, 0.200557845261855, -8.91077827005893, 6.34660606781571, -2.86535799213767, 3.87566128528599, -9.25081667456023, -17.51837026619, 6.46083980706303, 0.226898501967396, -18.982703235021, 13.3145010228058, -10.4141735963687, 2.14851817644414, 3.68878890774206, -17.1524401737968, 7.28245276309952, 8.66084800890434, -9.49504863064788, 14.2678281247439, 10.9939035796339, -5.6713165117157, -20.3818228309785, 5.32533771226009, 15.1596772994975, 0.0711267234079672, 6.06777323823302, 6.35738831497532, 5.14109648278749, -12.7157640379035, -6.12583894234074, -5.05650082702724, 16.8685317633471, -8.27819149081725, -2.12807199296307, -5.36939485037165, 1.2617894007054, -7.51605394373378, 8.97611716790317, 28.1625325156341, -6.476024258654, 6.74651036641415, 18.4854578715074, 0.129885290207467, -7.83235691866426, -4.54746865282582, 7.90261529226653, -5.48277566655145, -10.9324861263849, 6.62748268038848, 4.32876481917804, 11.5509026601816, 4.45287356418132, -1.50703775093538, 16.706121947003, 13.6293847083546, -6.64563164096073, 11.9248244921337, 3.90767994937345, -4.57422599363853, 2.9141428447148, 11.790385383797, 9.70575695614318, -14.7204694016314, -3.07879340187608, -16.6820035621629, -3.64910938055176, 8.19961036688014, 14.6144219836448, 0.501865834592649, 19.6223190886823, -0.772762665318388, 3.31503754594513, -11.1893762956114, 2.15630438592914, -9.21806881536813, 2.47457830695888, -16.6941837527141, 7.31087064922005, 9.06953006017507, 3.05057083155228, 6.3972888414122, 1.3970868359469, -11.6653640205622, -6.33300639271881, 6.33753566852341, 7.50278989210248, 8.4448380014582, 20.4106706159941, 12.8735053110581, 5.24475115788214, 6.33856308738893, 1.24837873485738, -4.97013713798284, 12.3749536954848, 2.69395470047386, -6.65933023205717, -7.30382586098399, -8.18014613757864, -14.6699638049296, 6.57201241844236, -5.18599816856524, -7.22363843291223, -17.4583114700177, 19.0766616110704, -0.840701538325886, 2.37151340575887, 4.60205704974589, 13.5247426575288, 5.06277530405992, 2.05593416464692, 10.1266375009245, -3.80185720109814, 3.38113578612556, -12.9611609594524, 43.9989027074065, -7.96313352536049, 76.8364284226187, 0.20468672730817, -19.7109580317415, -36.2171896125968, 57.452169597455, 7.79649951297075, 7.89228782702839, 9.04528803553459, 17.2607422334976, -19.4808460502366, -65.0334195680853, 51.351276490138, -16.15129800243, 58.5323148885825, 16.5089041937528, 1.72950774577564, -17.3067818313089, 28.8837307665526, -14.8973142013109, -11.4222620335437, 41.0854198803488, -23.1935168639265, -59.3106816454739, 3.02304769600654, 29.5238209230347, 0.132606439857089, 25.8235707731104, 47.5467923126988, -29.4831064182321, -5.49657650357388, -7.74366865638874, -51.0967670534056, -3.48333586998903, 4.25343603040977, 60.2716978644881, 8.67707748053778, 9.82767226679491, -33.4897478888019, -2.04036842140642, 20.1146860220897, 1.70625443930494, 7.83238981623845, -14.0503926179338, -86.8207265478981, -1.46779843191994, -18.1245297339458, -3.64253762647952, 60.1206922619984, -27.2198366957378, 7.60086408594687, 6.66361408381558, -0.517344412269785, -0.9442881949846, -17.4390032848081, 71.6605931392192, -84.4943954872775, 11.5728778613914, -6.75227318394648, -33.7301962492598, 20.865933827035, -35.1778228619665, 7.9489186379502, 36.6753534842591, 30.5223675484138, -33.6696271814591, -4.2086666380358, -15.3107973943672, 53.406359369399, 46.259021884381, -9.05320712550614, -42.2321834333372, -7.5316840161237, -41.4188139450598, -16.4581888895584, -18.9000865859676, 3.3250789001099, -5.44489434430521, 2.68269057522437, -60.7067002474759, -40.878293234051, -23.85046268432, -17.5356751519588, 17.3196386353968, -34.8748968194156, 82.2334940694401, 5.0519212330596, -13.7206623618767, 11.982584699303, -13.2243997090062, -33.4087485327152, -33.0181169562359, 1.12475861187452, -15.3652371000588, -52.6846027415393, 11.1287751362122, -29.8328304720221, -41.3155549163606, 9.14905180365878, 12.1846097564932, 24.7253685809424, 33.283431692617, 25.2201481606338, 55.2148787814205, 21.5845689419767, 17.4187268980159, 16.9525644217859, -7.2934515377004, -30.7578570276934, 6.47520176197617, 43.7472650356854, -8.29946857600312, 13.8402244171709, -18.0589848135451, -66.9889075163851, -13.2499348845564, 52.9493521939233, -7.77044342675248, -33.9457815454522, -64.1250998312197, -14.2253412239896, -43.7356074947749, -13.3709977863948, -3.532084114549, -0.845867586643653, -18.9872196617354, 8.36471316670359, 16.570041552196, -5.97992142522085, 36.0846371660333, -26.8492936462907, -2.67101568239457, 41.1482681090249, 29.8053557457288, -14.4035841279095, 26.7636127171449, 8.84606403719283, -28.1396586846998, -2.07665427352986, 5.16951679559527, 26.1212714137535, -58.968619055097, -24.2420408920784, -30.7052027304549, -41.5966206185339, 35.3158327760168, -16.3135236365124, 47.3187579013767, -48.1846023042682, -13.6573695649633, -3.85163154848937, 35.8847233098103, 17.4894637575711, -33.1048986128381, -21.3200326586525, -1.28095345353168, 11.0829331373737, -24.5547371790122, -25.2661533671158, 59.6849701253429, -29.303404538369, 9.78771822456831, -8.19077135118858, 56.3415348962698, 24.7420028036472, 35.5608990310753, -11.4132662363534, 8.96841839112869, -15.9155044115716, 2.98553992092384, 30.7227557623836, -40.0291850144558, -30.40553244533, -24.1897004788502, -32.6106363124284, 14.8248532210282, 40.3019777443674, 9.57677027523793, -69.8276142063974, 32.597842787756, 35.811284133312, 52.6574797553747, -48.1013885507447, -17.3634973328919, -62.4931867904182, 5.05083678374158, -80.7745448455046, -33.4437123694258, -36.1488087075403, -35.4512473251143, 12.4897764794961, 25.9265576878374, 18.1347931485823, -55.6901295491841, -4.31912573735753, -12.1344412733464, -35.7369450722757, -38.9882302474832, -19.2637356229216, 13.5759100337231, -42.8237957261739, 2.267496508937, 8.55832600770555, 76.9329305430897, -2.09373089105683, 34.5042803190575, 19.9840204809506, 65.0751752992658, -83.4355175885026, 36.5868488419062, 10.755353149423, -24.9853773928273, 39.9729819976759, -17.1692460615827, -2.21315092040214, -17.735908324445, -13.12299403664, 45.7647849930572, -29.9295835988232, 10.8431671800315, 2.22207761912254, -1.15680072701182, -3.76937838860992, 31.3923762499693, -38.8125339452613, -10.7048712529944, 14.9512013256603, -22.2402647485513, 48.166520496559, -7.5267049126661, 41.2523690803454, -23.7139421278463, 49.2274012080125, -2.04364508523744, 20.1279951919824, 26.7238574154636, -21.1840642492258, -36.467517302425, 52.9763107218954, 28.2373543778787, -41.5857352400909, -34.673295231942, -37.7183087833687, 44.9608103242671, -43.4706107562983, -0.132734513200427, 2.37559766078849, -13.9100897655232, -4.07264806521323, 26.2068628263207, 15.6255098738694, 37.6099041483397, 23.4748133953838, -45.7544435184321, 26.0569508306792, -9.12337859356156, 14.9067356221599, 19.0408897357599, -46.0335975832716, -4.6655764689118, 45.2167526931613, 0.340410596260053, 6.44865062867013, 28.4902089596048, 66.1534160179471, -59.5254042891865, 30.571595199671, 3.28749213138323, -7.58397516301773, -2.15812762664568, 68.4947766958752, 3.84952945512636, -3.41836048180568, -0.277889691392299, -58.966577048855, -68.0209525017738, -22.3382582613414, -24.274059112226, 9.82040859873152, -31.9552398539038, 28.9132173928871, -17.8441718671938, -10.1670652856195, -11.5211629113817, -35.5841838115065, 29.6544085380448, -7.06737114729606, -44.4691589091821, 12.1754895157759, 5.5734388346113, 7.07671019590913, 31.9500537172335, -14.9770634915577, -50.2826963573346, 47.773923539905, 44.8440007856648, -27.6036332694522, -19.5181601634549, -66.5578764059939, 11.3197954640677, 33.4368935202779, -33.9883919691416, -37.1043257842225, -6.24175622877652, 12.5408045246934, -19.4259455726668, -62.327882976385, -59.2976548787819, 50.0062815160507, 17.0598711814153, 37.0304702538921, -17.4109280843999, 57.1676896868446, -12.2762042113948, -1.30262000939549, -37.378507130243, 8.03224474068266, 33.2262620577171, -6.40692374520602, -20.121169415759, -10.641165459309, -46.384158245824, -2.36313615214376, -67.0538593030379, 46.3653302975788, -12.71740159704, -43.7756029622665, -11.6135004574196, -20.618022279977, -32.9686415329411, 62.3894819716661, -37.9474362183502, 5.24631811840248, -9.32013817235425, -39.8782958533629, 35.74686699584, 35.494797812579, -3.13160009108764, -26.903853983916, 7.32159752277328, -65.5547326516136, 3.26427643859, 43.6447929278641, 36.0253828355082, -53.5963438142759, 2.43249317604225, 13.835854058716, 3.81721535081522, -24.8727146600426, 18.2529086397975, 4.61874565688123, -16.5755321676348, -54.5913100568204, -45.5539848197296, -47.9488139587167, 12.0466261773242, -57.2365749031804, 17.2717576058105, 27.2867671039154, 10.8377160249597, -33.4851265076853, -25.7995849675813, -56.7375094104253, 3.13713289164646, -30.8974678372433, 53.7603848722544, 26.1069228185747, -34.5718148813718, 5.58890278626377, -5.49767999859522, 22.0573243233348, 30.1576456484212, 30.5770358400474, 10.636837781439, -36.3036119696391, -12.7737351827436, 14.7631207162781, 4.16386020603022, -38.7222228494243, -10.3014239841301, 10.8980536344199, 3.16580042907883, -1.01266737657271, -12.3271414124217, -0.60871065194023, -0.318932168515236, -29.2997064598575, 21.5632671281967, -10.7288902412608, 13.0044262971268, -29.2987744778488, -57.9979557288646, 22.2875069441806, -0.395280538960102, -64.1259704656512, 42.0200038899225, -36.6393491027354, 6.32917673816687, 11.939474512872, -54.5084380766451, 26.8330575270999, 30.392203780547, -32.0873124192703, 47.0674127338129, 37.4062914893262, -19.9479493861836, -66.0390630666378, 19.4914511199567, 51.584635336247, 0.37660327545596, 20.7369749945091, 21.0952573454262, 14.8620368746876, -41.4463112419028, -20.0277838146346, -16.1349534068735, 55.0429015215431, -28.282590062811, -7.03939973949676, -18.3369782387637, 5.76431956190348, -23.1808416347762, 31.5432079092299, 92.5251489251707, -22.7686122400988, 22.0022182040476, 59.4618408317801, -2.61949351284623, -27.6722807186757, -14.240245183009, 26.8602018528761, -17.7821344859499, -36.2356794499886, 24.0109027668101, 15.4846984183142, 36.6190297165843, 15.1561253391778, -3.5525924800938, 55.7130038331731, 44.2888928739335, -22.3280312901024, 39.0050117511386, 11.4606172600299, -14.4784455832683, 10.21845145313, 40.620879974342, 32.4996540709722, -47.5679167531693, -10.972866639005, -56.1193337664405, -12.1347659867643, 29.0443743874706, 50.0438230799696, 2.77106528859932, 65.7023375155493, 0.108407596746819, 11.1637046123531, -36.0395213307195, 6.97632937304241, -32.1814580516599, 8.3483666373435, -51.9139982768892, 24.4027690924461, 28.983139612205, 8.56409315354251, 18.4372066472277, 3.7735725518882, -37.038495716142, -20.1330597393283, 19.7739167069276, 25.5156085253107, 27.0261046226346, 68.3538342392781, 43.4147569195444, 15.3997136101793, 18.0681302369711, 5.39596239852676, -15.1566988313316, 42.0670264028952, 8.17623367561006, -20.4132922470647, -23.5511032076361, -28.3374810966745, -46.7417932839736, 20.6955594960473, -16.8896832176128, -23.4328756335679, -59.9206597886318, 64.991111090291, -2.01512473728701, 8.38422268285755, 13.9814201221565, 44.3845634398482, 15.7694948119935, 8.64878562790897, 34.222715238253, -11.2745739483391, 10.4973124668204, -42.9221173852593), dim = c(500L, 4L), dimnames = list(NULL, NULL))): Lantern is not loaded. Please use `install_torch()` to install additional dependencies."},{"path":"https://stefaneng.github.io/sometears/reference/fit_topo.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit TOPO from Deng et al 2023 — fit_topo","title":"Fit TOPO from Deng et al 2023 — fit_topo","text":"Fit TOPO Deng et al 2023","code":""},{"path":"https://stefaneng.github.io/sometears/reference/fit_topo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit TOPO from Deng et al 2023 — fit_topo","text":"","code":"fit_topo(   X,   topo = 1:ncol(X),   size_small = NULL,   size_large = NULL,   use_large_space = d <= 10,   model_type = c(\"linear\", \"nonlinear\"),   loss_type = c(\"l2\"),   h_func = h_logdet,   h_func_grad = h_logdet_grad,   s = 1.1,   verbose = F )"},{"path":"https://stefaneng.github.io/sometears/reference/fit_topo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit TOPO from Deng et al 2023 — fit_topo","text":"X matrix data columns variable interest directed acyclic graph topo vector integers indicating initial topological order variables size_small minimum size search space. size_large maximum size search space. use_large_space boolean indicating search space expanded minimum size sufficient. model_type type model fit. Currently linear models supported. loss_type Currently supports l2 loss h_func continuous acyclic function use. See h_logdet. h_func_grad gradient acyclic funtion use. See h_logdet_grad. s penalty parameter logdet function. larger spectral radius X. verbose boolean indicating function print progress","code":""},{"path":"https://stefaneng.github.io/sometears/reference/fit_topo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit TOPO from Deng et al 2023 — fit_topo","text":"list containing estimated W matrix, topological order, Z matrix, loss","code":""},{"path":"https://stefaneng.github.io/sometears/reference/fit_topo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit TOPO from Deng et al 2023 — fit_topo","text":"","code":"B <- matrix( c(0, 3, 3, 1,   0, 0, 1, 5,   0, 0, 0, 1,   0, 0, 0, 0), nrow = 4, ncol = 4, byrow = TRUE)  d <- ncol(B) X <- sim_linear_sem(B, n = 1000, Sigma = diag(0.01, nrow = d)) (est_B <- fit_topo(X, d:1)) #> $W #>      [,1]    [,2]     [,3]      [,4] #> [1,]    0 3.00966 2.907395 1.0560490 #> [2,]    0 0.00000 1.037996 5.0636904 #> [3,]    0 0.00000 0.000000 0.9762468 #> [4,]    0 0.00000 0.000000 0.0000000 #>  #> $topo #> [1] 1 2 3 4 #>  #> $Z #>      [,1]  [,2]  [,3]  [,4] #> [1,] TRUE FALSE FALSE FALSE #> [2,] TRUE  TRUE FALSE FALSE #> [3,] TRUE  TRUE  TRUE FALSE #> [4,] TRUE  TRUE  TRUE  TRUE #>  #> $loss #> [1] 0.01964182 #>"},{"path":"https://stefaneng.github.io/sometears/reference/h_expm.html","id":null,"dir":"Reference","previous_headings":"","what":"Implements the matrix exponential acyclicity regularizer from DAGs with no TEARS (Zheng et al 2018) — h_expm","title":"Implements the matrix exponential acyclicity regularizer from DAGs with no TEARS (Zheng et al 2018) — h_expm","text":"Implements matrix exponential acyclicity regularizer DAGs TEARS (Zheng et al 2018)","code":""},{"path":"https://stefaneng.github.io/sometears/reference/h_expm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Implements the matrix exponential acyclicity regularizer from DAGs with no TEARS (Zheng et al 2018) — h_expm","text":"","code":"h_expm(W, include_grad = FALSE)  h_expm_grad(W)"},{"path":"https://stefaneng.github.io/sometears/reference/h_expm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Implements the matrix exponential acyclicity regularizer from DAGs with no TEARS (Zheng et al 2018) — h_expm","text":"W weighted adjacency matrix include_grad whether include gradient regularizer","code":""},{"path":"https://stefaneng.github.io/sometears/reference/h_expm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Implements the matrix exponential acyclicity regularizer from DAGs with no TEARS (Zheng et al 2018) — h_expm","text":"either list gradient included scalar","code":""},{"path":"https://stefaneng.github.io/sometears/reference/h_expm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Implements the matrix exponential acyclicity regularizer from DAGs with no TEARS (Zheng et al 2018) — h_expm","text":"","code":"X <- matrix(0, nrow = 3, ncol = 3) X_lower <- lower.tri(X)  # DAG h_expm(lower.tri(X)) #> [1] 0  # Not a DAG X2 <- X_lower X2[1, 2] <- 1 h_expm(X2) #> [1] 1.086161"},{"path":"https://stefaneng.github.io/sometears/reference/h_logdet.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the log-determinant acyclicity characterization — h_logdet","title":"Computes the log-determinant acyclicity characterization — h_logdet","text":"function exactly zero matrix DAG. gradient gradient log-determinant acyclicity characterization also zero exactly matrix DAG.","code":""},{"path":"https://stefaneng.github.io/sometears/reference/h_logdet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the log-determinant acyclicity characterization — h_logdet","text":"","code":"h_logdet(X, s = 1, transform = c(\"square\", \"abs\"))  h_logdet_grad(X, s = 1)"},{"path":"https://stefaneng.github.io/sometears/reference/h_logdet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the log-determinant acyclicity characterization — h_logdet","text":"X matrix s regularization parameter. larger spectral radius (largest absolute eigenvalue) X.","code":""},{"path":"https://stefaneng.github.io/sometears/reference/h_logdet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the log-determinant acyclicity characterization — h_logdet","text":"numeric","code":""},{"path":"https://stefaneng.github.io/sometears/reference/h_logdet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computes the log-determinant acyclicity characterization — h_logdet","text":"Bello, K., Aragam, B., & Ravikumar, P. (2023).","code":""},{"path":"https://stefaneng.github.io/sometears/reference/h_logdet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes the log-determinant acyclicity characterization — h_logdet","text":"","code":"B <- matrix(c(0, 0.6, -0.5, 0), nrow = 2, byrow = TRUE) h_logdet(B) # Not a DAG means > 0 #> [1] 0.09431068 B_dag <- matrix(c(0,0,1,0), nrow = 2, byrow = TRUE) h_logdet(B_dag) # DAG means 0 #> [1] 0"},{"path":"https://stefaneng.github.io/sometears/reference/is_dag.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if matrix is a directed acyclic graph — is_dag","title":"Checks if matrix is a directed acyclic graph — is_dag","text":"Checks matrix directed acyclic graph","code":""},{"path":"https://stefaneng.github.io/sometears/reference/is_dag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if matrix is a directed acyclic graph — is_dag","text":"","code":"is_dag(W, threshold = 1e-05)"},{"path":"https://stefaneng.github.io/sometears/reference/is_dag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if matrix is a directed acyclic graph — is_dag","text":"W matrix represents directed graph threshold threshold determine value zero","code":""},{"path":"https://stefaneng.github.io/sometears/reference/is_dag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if matrix is a directed acyclic graph — is_dag","text":"boolean indicating matrix directed acyclic graph","code":""},{"path":"https://stefaneng.github.io/sometears/reference/is_dag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if matrix is a directed acyclic graph — is_dag","text":"","code":"d <- 100 B <- matrix(0, d, d) idx <- sample(1:d) B[lower.tri(B)] <- runif(d*(d - 1) / 2, min = 1, max = 100) is_dag(B[idx, idx]) # DAG #> [1] TRUE  B[1,10] <- 1 is_dag(B[idx, idx]) # Not a DAG #> [1] FALSE"},{"path":"https://stefaneng.github.io/sometears/reference/sim_linear_sem.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate from linear SEM — sim_linear_sem","title":"Simulate from linear SEM — sim_linear_sem","text":"Simulate model X = X  pass upper triangular take transpose X ~ MVN(0, (- W)^-T  eps ~ MVN(0, Sigma)","code":""},{"path":"https://stefaneng.github.io/sometears/reference/sim_linear_sem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate from linear SEM — sim_linear_sem","text":"","code":"sim_linear_sem(W, n = 1, Sigma = diag(ncol(W)))"},{"path":"https://stefaneng.github.io/sometears/reference/sim_linear_sem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate from linear SEM — sim_linear_sem","text":"W Adjacency matrix representing SEM (d x d) n Number samples Sigma Covariance matrix noise","code":""},{"path":"https://stefaneng.github.io/sometears/reference/sim_linear_sem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate from linear SEM — sim_linear_sem","text":"Matrix samples (n x d)","code":""},{"path":"https://stefaneng.github.io/sometears/reference/sim_linear_sem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate from linear SEM — sim_linear_sem","text":"","code":"B <- matrix( c(0, 3, 0, 3,   0, 0, 0, 5,   0, 0, 0, 2,   0, 0, 0, 0), nrow = 4, ncol = 4, byrow = TRUE) d <- ncol(B) X <- sim_linear_sem(B, n = 500, Sigma = 1 * diag(ncol(B)))"},{"path":"https://stefaneng.github.io/sometears/reference/spectral_radius.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the spectral radius (the largest absolute eigenvalue) of a matrix — spectral_radius","title":"Computes the spectral radius (the largest absolute eigenvalue) of a matrix — spectral_radius","text":"Computes spectral radius (largest absolute eigenvalue) matrix","code":""},{"path":"https://stefaneng.github.io/sometears/reference/spectral_radius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the spectral radius (the largest absolute eigenvalue) of a matrix — spectral_radius","text":"","code":"spectral_radius(W)"},{"path":"https://stefaneng.github.io/sometears/reference/spectral_radius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the spectral radius (the largest absolute eigenvalue) of a matrix — spectral_radius","text":"W matrix","code":""},{"path":"https://stefaneng.github.io/sometears/reference/spectral_radius.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the spectral radius (the largest absolute eigenvalue) of a matrix — spectral_radius","text":"spectral radius matrix","code":""},{"path":"https://stefaneng.github.io/sometears/reference/spectral_radius.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes the spectral radius (the largest absolute eigenvalue) of a matrix — spectral_radius","text":"","code":"B <- matrix(c(0, 0.6, -0.5, 0), nrow = 2, byrow = TRUE) spectral_radius(B) #> [1] 0.5477226"},{"path":"https://stefaneng.github.io/sometears/reference/threshold_W.html","id":null,"dir":"Reference","previous_headings":"","what":"Threshold a matrix by setting the variables less than threshold to 0 — threshold_W","title":"Threshold a matrix by setting the variables less than threshold to 0 — threshold_W","text":"Threshold matrix setting variables less threshold 0","code":""},{"path":"https://stefaneng.github.io/sometears/reference/threshold_W.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Threshold a matrix by setting the variables less than threshold to 0 — threshold_W","text":"","code":"threshold_W(W, threshold = 0.1)"},{"path":"https://stefaneng.github.io/sometears/reference/threshold_W.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Threshold a matrix by setting the variables less than threshold to 0 — threshold_W","text":"W matrix threshold threshold value","code":""},{"path":"https://stefaneng.github.io/sometears/reference/threshold_W.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Threshold a matrix by setting the variables less than threshold to 0 — threshold_W","text":"W values less threshold set 0","code":""},{"path":"https://stefaneng.github.io/sometears/reference/threshold_W.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Threshold a matrix by setting the variables less than threshold to 0 — threshold_W","text":"","code":"W <- matrix(c(0, 0.6, -0.5, 1e-3), nrow = 2, byrow = TRUE) threshold_W(W, threshold = 0.1) #>      [,1] [,2] #> [1,]  0.0  0.6 #> [2,] -0.5  0.0"},{"path":"https://stefaneng.github.io/sometears/reference/total_direct_conversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts total effects to direct effects and visa verse — total_to_direct","title":"Converts total effects to direct effects and visa verse — total_to_direct","text":"Assuming matrix total linear effects W can convert matrix direct effects W_dir assume W_tot = W_dir + W_dir^2 + W_dir^3 + ... can solve W_dir = - (+ W_tot)^-1 assume spectral radius (largest absolute eigenvalue) W_dir < 1 condition abs(eigenvalue(W_tot) / (1 + eigenvalue(W_tot))) < 1","code":""},{"path":"https://stefaneng.github.io/sometears/reference/total_direct_conversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts total effects to direct effects and visa verse — total_to_direct","text":"","code":"total_to_direct(W, restrict_dag = TRUE, enforce_spectral_radius = TRUE)  direct_to_total(W, restrict_dag = TRUE)"},{"path":"https://stefaneng.github.io/sometears/reference/total_direct_conversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts total effects to direct effects and visa verse — total_to_direct","text":"W matrix total/direct linear effects restrict_dag boolean indicating matrix must directed acyclic graph enforce_spectral_radius boolean indicating spectral radius W_dir must less 1. Generally recommended disable","code":""},{"path":"https://stefaneng.github.io/sometears/reference/total_direct_conversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts total effects to direct effects and visa verse — total_to_direct","text":"matrix direct effects","code":""},{"path":"https://stefaneng.github.io/sometears/reference/total_direct_conversion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts total effects to direct effects and visa verse — total_to_direct","text":"","code":"B <- matrix(c(0, 0.6, -0.5, 0), nrow = 2, byrow = TRUE) total_to_direct(B,  restrict_dag = F) #>            [,1]      [,2] #> [1,]  0.2307692 0.4615385 #> [2,] -0.3846154 0.2307692 all(zapsmall(direct_to_total(total_to_direct(B, restrict_dag = F), restrict_dag = F)) == B) #> Error in direct_to_total(total_to_direct(B, restrict_dag = F), restrict_dag = F): could not find function \"direct_to_total\"  B2 <- matrix(c(0,0,0,              1,0,0,              1,1,0), nrow = 3, byrow = TRUE) total_to_direct(B2) #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    1    0    0 #> [3,]    0    1    0"}]
